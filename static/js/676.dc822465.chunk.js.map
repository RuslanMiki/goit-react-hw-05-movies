{"version":3,"file":"static/js/676.dc822465.chunk.js","mappings":"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","sources":["components/Container/Container.jsx","components/MovieGallery/MovieGallery.module.css","components/MovieGallery/MovieGallery.jsx","components/Searchbar/Searchbar.jsx","pages/MoviesPage/MoviesPage.jsx","services/api.js","services/settings.js","services/fetchMovies.js"],"sourcesContent":["export const Container = ({ children }) => {\r\n  return <div>{children}</div>;\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {};","import { Link } from 'react-router-dom';\r\nimport style from './MovieGallery.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const MovieGallery = ({ movies, prevLocation }) => {\r\n  const renderGallery = () =>\r\n    movies.map(({ id, title }) => (\r\n      <li key={id} className={style.galleryList_item}>\r\n        <Link to={`/movies/${id}`} state={{ from: prevLocation }}>\r\n          {title}\r\n        </Link>\r\n      </li>\r\n    ));\r\n\r\n  return (\r\n    <div>\r\n      <ul className={style.galleryList}>{movies ? renderGallery() : null}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nMovieGallery.propTypes = {\r\n  movies: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      title: PropTypes.string.isRequired,\r\n    }).isRequired\r\n  ),\r\n};\r\n\r\nexport default MovieGallery;\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Searchbar = ({ onSearch }) => {\r\n  const [searchRequest, setSearchRequest] = useState('');\r\n\r\n  const handleRequestChange = event => {\r\n    setSearchRequest(event.currentTarget.value.toLowerCase());\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    if (searchRequest.trim() === '') {\r\n      alert('Search field is empty!');\r\n      return;\r\n    }\r\n    onSearch(searchRequest);\r\n    setSearchRequest('');\r\n  };\r\n\r\n  return (\r\n    <header>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"searchRequest\"\r\n          value={searchRequest}\r\n          onChange={handleRequestChange}\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n        />\r\n        <button type=\"submit\">Search</button>\r\n      </form>\r\n    </header>\r\n  );\r\n};\r\n\r\nSearchbar.propTypes = {\r\n  onSearch: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Searchbar;\r\n","import { useState, useEffect } from 'react';\r\nimport { useSearchParams, useLocation } from 'react-router-dom';\r\n\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { Container } from 'components/Container/Container';\r\n\r\nimport Loader from 'components/Loader/Loader';\r\nimport Searchbar from 'components/Searchbar/Searchbar';\r\nimport MovieGallery from 'components/MovieGallery/MovieGallery';\r\n\r\nimport { fetchMoviesByRequest } from 'services/fetchMovies';\r\n\r\nexport default function MoviesPage() {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const [movies, setMovies] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const searchRequest = searchParams.get('query');\r\n\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    if (!searchRequest) {\r\n      return;\r\n    }\r\n    const updateMovies = searchRequest => {\r\n      setIsLoading(true);\r\n      try {\r\n        fetchMoviesByRequest(searchRequest).then(data => {\r\n          if (!data.data.results.length) {\r\n            alert('There is no movies found with that search request');\r\n            return;\r\n          }\r\n          const mappedMovies = data.data.results.map(({ id, title }) => ({\r\n            id,\r\n            title,\r\n          }));\r\n          setMovies([...mappedMovies]);\r\n        });\r\n      } catch (error) {\r\n        setError(error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    if (searchRequest !== '') {\r\n      updateMovies(searchRequest);\r\n    }\r\n  }, [searchRequest]);\r\n\r\n  const handleSearchSubmit = value => {\r\n    setSearchParams({ query: `${value}` });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Searchbar onSearch={handleSearchSubmit} />\r\n      {error && toast.error(`Whoops, something went wrong: ${error.message}`)}\r\n      {isLoading && <Loader />}\r\n      {movies.length > 0 && (\r\n        <MovieGallery movies={movies} prevLocation={location} />\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n","import axios from 'axios';\r\n\r\nexport const http = {\r\n  get(url) {\r\n    return axios.get(url);\r\n  },\r\n  post(url, body) {\r\n    return axios.post(url, body);\r\n  },\r\n};","const settings = {\r\n  BASE_URL: 'https://api.themoviedb.org/3',\r\n  API_KEY: '4d0f1a70283628d770bc4f97516afca6',\r\n  DEFAULT_LANGUAGE: 'en-US',\r\n};\r\n\r\nexport default settings;","import { http } from './api';\r\nimport apiSettings from './settings';\r\n\r\nconst { BASE_URL, API_KEY } = apiSettings;\r\n\r\nexport const fetchMovies = (page = 1) => {\r\n  return http.get(\r\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${page}`\r\n  );\r\n};\r\n\r\nexport const fetchMoviesByRequest = (searchRequest, page = 1) => {\r\n  return http.get(\r\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&page=${page}&query=${searchRequest}`\r\n  );\r\n};\r\n\r\nexport const fetchMoviesById = movieId => {\r\n  return http.get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`);\r\n};\r\n\r\nexport const fetchCast = movieId => {\r\n  return http.get(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`);\r\n};\r\n\r\nexport const fetchReviews = movieId => {\r\n  return http.get(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`);\r\n};"],"names":["Container","children","MovieGallery","movies","prevLocation","className","style","map","id","title","to","state","from","onSearch","useState","searchRequest","setSearchRequest","onSubmit","event","preventDefault","trim","alert","type","name","value","onChange","currentTarget","toLowerCase","autoComplete","autoFocus","MoviesPage","useSearchParams","searchParams","setSearchParams","setMovies","error","setError","isLoading","setIsLoading","get","location","useLocation","useEffect","fetchMoviesByRequest","then","data","results","length","mappedMovies","updateMovies","query","toast","message","Loader","http","url","axios","BASE_URL","API_KEY","DEFAULT_LANGUAGE","apiSettings","fetchMovies","page","fetchMoviesById","movieId","fetchCast","fetchReviews"],"sourceRoot":""}